---
import Layout from '../../layouts/Layout.astro';
import SlideshowNav from '../../components/SlideshowNav.astro';
import ImageModal from '../../components/ImageModal.astro';

import data from '../../../data.json';
import { convertToSlug } from '../../scripts/main.js';

export function getStaticPaths() {
  return data.map(({ name, year, description, source, artist, images }, index) => {
    return {
      params: { picture: convertToSlug(name) },
      props: { index, name, year, description, source, artist, images },
    };
  });
}

const { index, name, year, description, source, artist, images } = Astro.props;
---

<Layout title={name} page="galleria">
  <div class="picture-container wrapper">
    <div class="picture-container__left">
      <div>
        <figure class="picture-container__figure">
          <img class="picture-container__image" src={images.hero.small} alt={description} />
          <div>
            <figcaption>
              <h1 class="picture-container__title">
                {name}
              </h1>
            </figcaption>
            <p class="picture-container__name text--primary">
              {artist.name}
            </p>
          </div>
        </figure>
        <button class="picture-container__view btn btn__view">
          <img src="/icons/view.svg" alt="" aria-hidden="true" />
          view image
        </button>
      </div>
      <img class="picture-container__artist-img" src={artist.image} alt={artist.name} />
    </div>
    <div class="picture-container__right" data-year={year}>
      <p class="text--primary">{description}</p>
      <a href={source} class="link link--source" target="_blank" rel="noopener noreferrer"
        >go to source</a
      >
    </div>
  </div>
  <SlideshowNav title={name} artist={artist.name} index={index} />
</Layout>
<ImageModal imgUrl={images.hero.large} alt={description} />

<script>
  import { navigate } from 'astro:transitions/client';
  let slideshowState = sessionStorage.getItem('slideshow') || 'stop';
  let timeoutId;

  document.addEventListener('astro:page-load', () => {
    const slideshowBtn = document.querySelector('button.link--slideshow');
    const loaderLine = document.querySelector('.loader');
    const nextPageLink = document.querySelector('.btn--next');
    const modalBtnOpen = document.querySelector('.picture-container__view');
    const modalBtnClose = document.querySelector('.modal .btn__view');
    const modal = document.querySelector('#modal');
    const header = document.querySelector('header');
    const main = document.querySelector('main');

    if (modalBtnOpen) {
      modalBtnOpen.addEventListener('click', () => {
        modal.showModal();
        modalBtnClose.focus();
        main.setAttribute('inert', '');
        header.setAttribute('inert', '');
      });

      modalBtnClose.addEventListener('click', () => {
        modal.close();
        main.removeAttribute('inert');
        header.removeAttribute('inert');
      });
    }

    const startAnimation = () => {
      if (slideshowState === 'play' && !nextPageLink.classList.contains('link--disabled')) {
        slideshowBtn.textContent = 'Stop slideshow';
        loaderLine.classList.add('loading-animation');

        timeoutId = setTimeout(() => {
          navigate(nextPageLink.href);
        }, 10000);
      } else {
        loaderLine.classList.remove('loading-animation');
        slideshowBtn.textContent = 'Start slideshow';
        clearTimeout(timeoutId);
      }
    };

    const toggleSlideshowState = () => {
      if (slideshowState === 'play') {
        sessionStorage.setItem('slideshow', 'stop');
      } else {
        sessionStorage.setItem('slideshow', 'play');
      }

      slideshowState = sessionStorage.getItem('slideshow');
    };

    if (slideshowBtn) {
      slideshowBtn.addEventListener('click', () => {
        toggleSlideshowState();
        startAnimation();
      });

      startAnimation();
    }
  });
</script>
